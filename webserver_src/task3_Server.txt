	27.11.2015

	Задание.

	Реализовать программу для ОС Linux, выполняющую функции простого веб-сервера.
	Программа должна предоставлять доступ к файлам в некотором каталоге.
	Для этого она прослушивает порт и обрабатывает входящие соединения по протоколу HTTP.
	Файлы данных она должна просто передавать. А файлы со скриптами запускать и передавать их вывод.



	Указания и рекомендации.

	Программа должна поддерживать основные возможности протокола HTTP и выдавать основные коды ошибок.

	При запуске программа должна определить прослушиваемый порт (обычно 80), свой корневой каталог и, быть может, другие параметры. Это можно реализовать с помощью опций командной строки или с помощью файла конфигурации. Опции командной строки должны быть в принятом формате (например, короткая опция -h, длинная --help) и обрабатываться функцией getopt.

	При запросе по протоколу HTTP имени каталога, следует выводить листинг каталога (можно завести опцию, которая будет менять это поведение по умолчанию).

	Ожидать входящих соединений должна изначальная программа. 
	После получения сокета соединения обработку этого соединения необходимо поручить другому процессу/потоку. 
	Чтобы основной процесс продолжил принимать соединения. Можно было бы на каждое входящее соединение порождать новый процесс. Но это очень накладно. 
	Поэтому следует реализовать пул процессов, обрабатывающих соединения. В самом начале должно порождаться достаточное количество процессов. 
	Необходимо организовать некоторую очередь обработчиков. 
	Эти процессы должны ожидать от основного процесса передачи им запроса на обработку, обрабатывать его, после чего опять вставать в очередь для получения нового запроса. Запрос - это по сути сокет соединения, который необходимо обработать.
	Обработчики могут быть реализованы с помощью процессов (разделяющих с основным процессом таблицу файловых дескрипторов) или с помощью потоков (это процессы, разделяющие с основным процессом все ресурсы). 
	Для их создания следует использовать функцию clone с нужными аргументами.
	Синхронизацию (ожидание) можно реализовать с помощью семафоров. Передачу информации между процессами с помощью разделяемой памяти или каналов.
	
	При доступе к скриптам (а их следует идентифицировать по расширению: .pl, .php, .py, .exe) необходимо запускать этот файл на исполнение. Вывод программы будет динамически сформированным содержимым страницы, которую следует вернуть пользователю. Запускать скрипты следует по соглашению CGI.
